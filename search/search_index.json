{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction au Langage C Le langage C est l'un des langages de programmation les plus populaires et les plus puissants. Il est utilis\u00e9 pour d\u00e9velopper des syst\u00e8mes d'exploitation, des logiciels embarqu\u00e9s, des applications performantes, et bien plus encore. Table des Mati\u00e8res Histoire du C Installation d'un Compilateur Syntaxe de Base Variables et Types de Donn\u00e9es Op\u00e9rateurs Structures de Contr\u00f4le Fonctions Tableaux et Pointeurs Gestion de la M\u00e9moire Fichiers Exercices Histoire du C Le langage C a \u00e9t\u00e9 d\u00e9velopp\u00e9 dans les ann\u00e9es 1970 par Dennis Ritchie au Bell Labs. Il a \u00e9t\u00e9 con\u00e7u pour \u00eatre un langage de programmation de bas niveau, permettant un contr\u00f4le pr\u00e9cis du mat\u00e9riel, tout en restant suffisamment abstrait pour \u00eatre portable. Installation d'un Compilateur Pour \u00e9crire et ex\u00e9cuter des programmes en C, vous avez besoin d'un compilateur C. Voici quelques compilateurs populaires : GCC (GNU Compiler Collection) Clang MSVC (Microsoft Visual C++ pour Windows) Une fois le compilateur install\u00e9, vous pouvez cr\u00e9er un fichier avec l'extension .c , l'\u00e9crire avec du code C, et le compiler avec la commande : gcc mon_programme.c -o mon_programme Syntaxe de Base Voici un exemple de programme \"Hello, World!\" en C : #include <stdio.h> int main() { printf(\"Hello, World!\\n\"); return 0; } Explication #include <stdio.h> : Inclut la biblioth\u00e8que standard d'entr\u00e9e/sortie pour utiliser printf . int main() : Fonction principale qui d\u00e9marre le programme. printf : Fonction qui affiche du texte \u00e0 l'\u00e9cran. Variables et Types de Donn\u00e9es En C, les variables doivent \u00eatre d\u00e9clar\u00e9es avec un type. Voici les types de base : int : Entier (par exemple, int a = 5; ) float : Nombre \u00e0 virgule flottante (ex. float b = 5.5; ) char : Caract\u00e8re unique (ex. char c = 'A'; ) Exemple : #include <stdio.h> int main() { int age = 30; float taille = 1.75; char initial = 'J'; printf(\"Age : %d, Taille : %.2f, Initial : %c\\n\", age, taille, initial); return 0; } Op\u00e9rateurs Les op\u00e9rateurs en C incluent : Op\u00e9rateurs arithm\u00e9tiques : + , - , * , / , % Op\u00e9rateurs de comparaison : == , != , < , > , <= , >= Op\u00e9rateurs logiques : && , || , ! Exemple : int a = 10, b = 5; int somme = a + b; int egal = (a == b); Structures de Contr\u00f4le Conditionnelles #include <stdio.h> int main() { int age = 20; if (age >= 18) { printf(\"Vous \u00eates majeur.\\n\"); } else { printf(\"Vous \u00eates mineur.\\n\"); } return 0; } Boucles while : R\u00e9p\u00e8te une action tant qu'une condition est vraie. for : R\u00e9p\u00e8te une action pour un nombre d\u00e9fini d'it\u00e9rations. Exemple de boucle for : for (int i = 0; i < 5; i++) { printf(\"i vaut %d\\n\", i); } Fonctions Les fonctions permettent de structurer le code. #include <stdio.h> int addition(int a, int b) { return a + b; } int main() { int resultat = addition(5, 3); printf(\"Le r\u00e9sultat est %d\\n\", resultat); return 0; } Tableaux et Pointeurs Tableaux Un tableau est une collection de variables de m\u00eame type. int nombres[5] = {1, 2, 3, 4, 5}; printf(\"Premier \u00e9l\u00e9ment : %d\\n\", nombres[0]); Pointeurs Les pointeurs sont des variables qui stockent des adresses m\u00e9moire. int a = 5; int *p = &a; printf(\"La valeur de a est %d\\n\", *p); Gestion de la M\u00e9moire En C, vous pouvez allouer et lib\u00e9rer manuellement de la m\u00e9moire avec malloc et free . #include <stdio.h> #include <stdlib.h> int main() { int *ptr = malloc(sizeof(int)); *ptr = 42; printf(\"Valeur : %d\\n\", *ptr); free(ptr); // Lib\u00e8re la m\u00e9moire return 0; } Fichiers Le C permet la manipulation de fichiers avec des fonctions comme fopen , fprintf , fscanf , etc. #include <stdio.h> int main() { FILE *fichier = fopen(\"test.txt\", \"w\"); if (fichier != NULL) { fprintf(fichier, \"Bonjour, fichier !\"); fclose(fichier); } return 0; }","title":"Cours"},{"location":"#introduction-au-langage-c","text":"Le langage C est l'un des langages de programmation les plus populaires et les plus puissants. Il est utilis\u00e9 pour d\u00e9velopper des syst\u00e8mes d'exploitation, des logiciels embarqu\u00e9s, des applications performantes, et bien plus encore.","title":"Introduction au Langage C"},{"location":"#table-des-matieres","text":"Histoire du C Installation d'un Compilateur Syntaxe de Base Variables et Types de Donn\u00e9es Op\u00e9rateurs Structures de Contr\u00f4le Fonctions Tableaux et Pointeurs Gestion de la M\u00e9moire Fichiers Exercices","title":"Table des Mati\u00e8res"},{"location":"#histoire-du-c","text":"Le langage C a \u00e9t\u00e9 d\u00e9velopp\u00e9 dans les ann\u00e9es 1970 par Dennis Ritchie au Bell Labs. Il a \u00e9t\u00e9 con\u00e7u pour \u00eatre un langage de programmation de bas niveau, permettant un contr\u00f4le pr\u00e9cis du mat\u00e9riel, tout en restant suffisamment abstrait pour \u00eatre portable.","title":"Histoire du C"},{"location":"#installation-dun-compilateur","text":"Pour \u00e9crire et ex\u00e9cuter des programmes en C, vous avez besoin d'un compilateur C. Voici quelques compilateurs populaires : GCC (GNU Compiler Collection) Clang MSVC (Microsoft Visual C++ pour Windows) Une fois le compilateur install\u00e9, vous pouvez cr\u00e9er un fichier avec l'extension .c , l'\u00e9crire avec du code C, et le compiler avec la commande : gcc mon_programme.c -o mon_programme","title":"Installation d'un Compilateur"},{"location":"#syntaxe-de-base","text":"Voici un exemple de programme \"Hello, World!\" en C : #include <stdio.h> int main() { printf(\"Hello, World!\\n\"); return 0; }","title":"Syntaxe de Base"},{"location":"#explication","text":"#include <stdio.h> : Inclut la biblioth\u00e8que standard d'entr\u00e9e/sortie pour utiliser printf . int main() : Fonction principale qui d\u00e9marre le programme. printf : Fonction qui affiche du texte \u00e0 l'\u00e9cran.","title":"Explication"},{"location":"#variables-et-types-de-donnees","text":"En C, les variables doivent \u00eatre d\u00e9clar\u00e9es avec un type. Voici les types de base : int : Entier (par exemple, int a = 5; ) float : Nombre \u00e0 virgule flottante (ex. float b = 5.5; ) char : Caract\u00e8re unique (ex. char c = 'A'; ) Exemple : #include <stdio.h> int main() { int age = 30; float taille = 1.75; char initial = 'J'; printf(\"Age : %d, Taille : %.2f, Initial : %c\\n\", age, taille, initial); return 0; }","title":"Variables et Types de Donn\u00e9es"},{"location":"#operateurs","text":"Les op\u00e9rateurs en C incluent : Op\u00e9rateurs arithm\u00e9tiques : + , - , * , / , % Op\u00e9rateurs de comparaison : == , != , < , > , <= , >= Op\u00e9rateurs logiques : && , || , ! Exemple : int a = 10, b = 5; int somme = a + b; int egal = (a == b);","title":"Op\u00e9rateurs"},{"location":"#structures-de-controle","text":"","title":"Structures de Contr\u00f4le"},{"location":"#conditionnelles","text":"#include <stdio.h> int main() { int age = 20; if (age >= 18) { printf(\"Vous \u00eates majeur.\\n\"); } else { printf(\"Vous \u00eates mineur.\\n\"); } return 0; }","title":"Conditionnelles"},{"location":"#boucles","text":"while : R\u00e9p\u00e8te une action tant qu'une condition est vraie. for : R\u00e9p\u00e8te une action pour un nombre d\u00e9fini d'it\u00e9rations. Exemple de boucle for : for (int i = 0; i < 5; i++) { printf(\"i vaut %d\\n\", i); }","title":"Boucles"},{"location":"#fonctions","text":"Les fonctions permettent de structurer le code. #include <stdio.h> int addition(int a, int b) { return a + b; } int main() { int resultat = addition(5, 3); printf(\"Le r\u00e9sultat est %d\\n\", resultat); return 0; }","title":"Fonctions"},{"location":"#tableaux-et-pointeurs","text":"","title":"Tableaux et Pointeurs"},{"location":"#tableaux","text":"Un tableau est une collection de variables de m\u00eame type. int nombres[5] = {1, 2, 3, 4, 5}; printf(\"Premier \u00e9l\u00e9ment : %d\\n\", nombres[0]);","title":"Tableaux"},{"location":"#pointeurs","text":"Les pointeurs sont des variables qui stockent des adresses m\u00e9moire. int a = 5; int *p = &a; printf(\"La valeur de a est %d\\n\", *p);","title":"Pointeurs"},{"location":"#gestion-de-la-memoire","text":"En C, vous pouvez allouer et lib\u00e9rer manuellement de la m\u00e9moire avec malloc et free . #include <stdio.h> #include <stdlib.h> int main() { int *ptr = malloc(sizeof(int)); *ptr = 42; printf(\"Valeur : %d\\n\", *ptr); free(ptr); // Lib\u00e8re la m\u00e9moire return 0; }","title":"Gestion de la M\u00e9moire"},{"location":"#fichiers","text":"Le C permet la manipulation de fichiers avec des fonctions comme fopen , fprintf , fscanf , etc. #include <stdio.h> int main() { FILE *fichier = fopen(\"test.txt\", \"w\"); if (fichier != NULL) { fprintf(fichier, \"Bonjour, fichier !\"); fclose(fichier); } return 0; }","title":"Fichiers"},{"location":"exercices/","text":"Exercice 1 Objectif : Cr\u00e9ez un programme qui demande \u00e0 l'utilisateur deux nombres et une op\u00e9ration (+, -, *, /) et affiche le r\u00e9sultat. Instructions : Demandez \u00e0 l'utilisateur de saisir deux nombres ( float ). Demandez \u00e0 l'utilisateur de choisir une op\u00e9ration parmi + , - , * , ou / . Utilisez une structure conditionnelle if ou switch pour effectuer l'op\u00e9ration choisie. Affichez le r\u00e9sultat de l'op\u00e9ration. Exemple de sortie : Entrez le premier nombre : 10 Entrez le deuxi\u00e8me nombre : 5 Entrez l'op\u00e9ration (+, -, *, /) : * R\u00e9sultat : 50","title":"Exercices"},{"location":"exercices/#exercice-1","text":"Objectif : Cr\u00e9ez un programme qui demande \u00e0 l'utilisateur deux nombres et une op\u00e9ration (+, -, *, /) et affiche le r\u00e9sultat. Instructions : Demandez \u00e0 l'utilisateur de saisir deux nombres ( float ). Demandez \u00e0 l'utilisateur de choisir une op\u00e9ration parmi + , - , * , ou / . Utilisez une structure conditionnelle if ou switch pour effectuer l'op\u00e9ration choisie. Affichez le r\u00e9sultat de l'op\u00e9ration. Exemple de sortie : Entrez le premier nombre : 10 Entrez le deuxi\u00e8me nombre : 5 Entrez l'op\u00e9ration (+, -, *, /) : * R\u00e9sultat : 50","title":"Exercice 1"}]}